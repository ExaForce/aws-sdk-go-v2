// Code generated by smithy-go-codegen DO NOT EDIT.

package appsauthcontrol

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/aws/aws-sdk-go-v2/aws/protocol/restjson"
	"github.com/aws/aws-sdk-go-v2/service/appsauthcontrol/types"
	smithy "github.com/aws/smithy-go"
	smithyio "github.com/aws/smithy-go/io"
	"github.com/aws/smithy-go/middleware"
	"github.com/aws/smithy-go/ptr"
	smithytime "github.com/aws/smithy-go/time"
	smithyhttp "github.com/aws/smithy-go/transport/http"
	"io"
	"time"
)

func deserializeS3Expires(v string) (*time.Time, error) {
	t, err := smithytime.ParseHTTPDate(v)
	if err != nil {
		return nil, nil
	}
	return &t, nil
}

type awsAwsjson10_deserializeOpListExternalIdPConfigurationsForDirectory struct {
}

func (*awsAwsjson10_deserializeOpListExternalIdPConfigurationsForDirectory) ID() string {
	return "OperationDeserializer"
}

func (m *awsAwsjson10_deserializeOpListExternalIdPConfigurationsForDirectory) HandleDeserialize(ctx context.Context, in middleware.DeserializeInput, next middleware.DeserializeHandler) (
	out middleware.DeserializeOutput, metadata middleware.Metadata, err error,
) {
	out, metadata, err = next.HandleDeserialize(ctx, in)
	if err != nil {
		return out, metadata, err
	}

	response, ok := out.RawResponse.(*smithyhttp.Response)
	if !ok {
		return out, metadata, &smithy.DeserializationError{Err: fmt.Errorf("unknown transport type %T", out.RawResponse)}
	}

	if response.StatusCode < 200 || response.StatusCode >= 300 {
		return out, metadata, awsAwsjson10_deserializeOpErrorListExternalIdPConfigurationsForDirectory(response, &metadata)
	}
	output := &ListExternalIdPConfigurationsForDirectoryOutput{}
	out.Result = output

	var buff [1024]byte
	ringBuffer := smithyio.NewRingBuffer(buff[:])

	body := io.TeeReader(response.Body, ringBuffer)
	decoder := json.NewDecoder(body)
	decoder.UseNumber()
	var shape interface{}
	if err := decoder.Decode(&shape); err != nil && err != io.EOF {
		var snapshot bytes.Buffer
		io.Copy(&snapshot, ringBuffer)
		err = &smithy.DeserializationError{
			Err:      fmt.Errorf("failed to decode response body, %w", err),
			Snapshot: snapshot.Bytes(),
		}
		return out, metadata, err
	}

	err = awsAwsjson10_deserializeOpDocumentListExternalIdPConfigurationsForDirectoryOutput(&output, shape)
	if err != nil {
		var snapshot bytes.Buffer
		io.Copy(&snapshot, ringBuffer)
		err = &smithy.DeserializationError{
			Err:      fmt.Errorf("failed to decode response body, %w", err),
			Snapshot: snapshot.Bytes(),
		}
		return out, metadata, err
	}

	return out, metadata, err
}

func awsAwsjson10_deserializeOpErrorListExternalIdPConfigurationsForDirectory(response *smithyhttp.Response, metadata *middleware.Metadata) error {
	var errorBuffer bytes.Buffer
	if _, err := io.Copy(&errorBuffer, response.Body); err != nil {
		return &smithy.DeserializationError{Err: fmt.Errorf("failed to copy error response body, %w", err)}
	}
	errorBody := bytes.NewReader(errorBuffer.Bytes())

	errorCode := "UnknownError"
	errorMessage := errorCode

	headerCode := response.Header.Get("X-Amzn-ErrorType")

	var buff [1024]byte
	ringBuffer := smithyio.NewRingBuffer(buff[:])

	body := io.TeeReader(errorBody, ringBuffer)
	decoder := json.NewDecoder(body)
	decoder.UseNumber()
	bodyInfo, err := getProtocolErrorInfo(decoder)
	if err != nil {
		var snapshot bytes.Buffer
		io.Copy(&snapshot, ringBuffer)
		err = &smithy.DeserializationError{
			Err:      fmt.Errorf("failed to decode response body, %w", err),
			Snapshot: snapshot.Bytes(),
		}
		return err
	}

	errorBody.Seek(0, io.SeekStart)
	if typ, ok := resolveProtocolErrorType(headerCode, bodyInfo); ok {
		errorCode = restjson.SanitizeErrorCode(typ)
	}
	if len(bodyInfo.Message) != 0 {
		errorMessage = bodyInfo.Message
	}
	switch {
	default:
		genericError := &smithy.GenericAPIError{
			Code:    errorCode,
			Message: errorMessage,
		}
		return genericError

	}
}

func awsAwsjson10_deserializeDocumentCertificate(v **types.Certificate, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *types.Certificate
	if *v == nil {
		sv = &types.Certificate{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "certificateId":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.CertificateId = ptr.String(jtv)
			}

		case "status":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.Status = ptr.String(jtv)
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

func awsAwsjson10_deserializeDocumentCertificates(v *[]types.Certificate, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.([]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var cv []types.Certificate
	if *v == nil {
		cv = []types.Certificate{}
	} else {
		cv = *v
	}

	for _, value := range shape {
		var col types.Certificate
		destAddr := &col
		if err := awsAwsjson10_deserializeDocumentCertificate(&destAddr, value); err != nil {
			return err
		}
		col = *destAddr
		cv = append(cv, col)

	}
	*v = cv
	return nil
}

func awsAwsjson10_deserializeDocumentIdpAssociation(v **types.IdpAssociation, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *types.IdpAssociation
	if *v == nil {
		sv = &types.IdpAssociation{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "idpCertificateIds":
			if err := awsAwsjson10_deserializeDocumentCertificates(&sv.IdpCertificateIds, value); err != nil {
				return err
			}

		case "idpId":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected IdpIdentifierType to be of type string, got %T instead", value)
				}
				sv.IdpId = ptr.String(jtv)
			}

		case "idpOIDCAssociationValue":
			if err := awsAwsjson10_deserializeDocumentIdpOIDCAssociation(&sv.IdpOIDCAssociationValue, value); err != nil {
				return err
			}

		case "idpSAMLAssociationValue":
			if err := awsAwsjson10_deserializeDocumentIdpSAMLAssociation(&sv.IdpSAMLAssociationValue, value); err != nil {
				return err
			}

		case "idpSAMLConfig":
			if err := awsAwsjson10_deserializeDocumentIdpSAMLConfiguration(&sv.IdpSAMLConfig, value); err != nil {
				return err
			}

		case "isEnabled":
			if value != nil {
				jtv, ok := value.(bool)
				if !ok {
					return fmt.Errorf("expected booleanType to be of type *bool, got %T instead", value)
				}
				sv.IsEnabled = jtv
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

func awsAwsjson10_deserializeDocumentIdpAssociations(v *[]types.IdpAssociation, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.([]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var cv []types.IdpAssociation
	if *v == nil {
		cv = []types.IdpAssociation{}
	} else {
		cv = *v
	}

	for _, value := range shape {
		var col types.IdpAssociation
		destAddr := &col
		if err := awsAwsjson10_deserializeDocumentIdpAssociation(&destAddr, value); err != nil {
			return err
		}
		col = *destAddr
		cv = append(cv, col)

	}
	*v = cv
	return nil
}

func awsAwsjson10_deserializeDocumentIdpOIDCAssociation(v **types.IdpOIDCAssociation, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *types.IdpOIDCAssociation
	if *v == nil {
		sv = &types.IdpOIDCAssociation{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "idpOIDCConfig":
			if err := awsAwsjson10_deserializeDocumentIdpOIDCConfiguration(&sv.IdpOIDCConfig, value); err != nil {
				return err
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

func awsAwsjson10_deserializeDocumentIdpOIDCClaimDefinition(v **types.IdpOIDCClaimDefinition, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *types.IdpOIDCClaimDefinition
	if *v == nil {
		sv = &types.IdpOIDCClaimDefinition{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "tokenClaim":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.TokenClaim = ptr.String(jtv)
			}

		case "userAttributeName":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.UserAttributeName = ptr.String(jtv)
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

func awsAwsjson10_deserializeDocumentIdpOIDCConfiguration(v **types.IdpOIDCConfiguration, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *types.IdpOIDCConfiguration
	if *v == nil {
		sv = &types.IdpOIDCConfiguration{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "audience":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.Audience = ptr.String(jtv)
			}

		case "authorizationEndpoint":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.AuthorizationEndpoint = ptr.String(jtv)
			}

		case "clientId":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.ClientId = ptr.String(jtv)
			}

		case "issuerURL":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.IssuerURL = ptr.String(jtv)
			}

		case "jwksUri":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.JwksUri = ptr.String(jtv)
			}

		case "scopes":
			if err := awsAwsjson10_deserializeDocumentStringListType(&sv.Scopes, value); err != nil {
				return err
			}

		case "tokenEndpoint":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.TokenEndpoint = ptr.String(jtv)
			}

		case "userIdentityClaimDefinition":
			if err := awsAwsjson10_deserializeDocumentIdpOIDCClaimDefinition(&sv.UserIdentityClaimDefinition, value); err != nil {
				return err
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

func awsAwsjson10_deserializeDocumentIdpSAMLAssociation(v **types.IdpSAMLAssociation, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *types.IdpSAMLAssociation
	if *v == nil {
		sv = &types.IdpSAMLAssociation{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "idpCertificateIds":
			if err := awsAwsjson10_deserializeDocumentCertificates(&sv.IdpCertificateIds, value); err != nil {
				return err
			}

		case "idpSAMLConfig":
			if err := awsAwsjson10_deserializeDocumentIdpSAMLConfiguration(&sv.IdpSAMLConfig, value); err != nil {
				return err
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

func awsAwsjson10_deserializeDocumentIdpSAMLConfiguration(v **types.IdpSAMLConfiguration, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *types.IdpSAMLConfiguration
	if *v == nil {
		sv = &types.IdpSAMLConfiguration{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "entityId":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.EntityId = ptr.String(jtv)
			}

		case "loginURL":
			if value != nil {
				jtv, ok := value.(string)
				if !ok {
					return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
				}
				sv.LoginURL = ptr.String(jtv)
			}

		case "wantRequestSigned":
			if value != nil {
				jtv, ok := value.(bool)
				if !ok {
					return fmt.Errorf("expected booleanType to be of type *bool, got %T instead", value)
				}
				sv.WantRequestSigned = jtv
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

func awsAwsjson10_deserializeDocumentStringListType(v *[]string, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.([]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var cv []string
	if *v == nil {
		cv = []string{}
	} else {
		cv = *v
	}

	for _, value := range shape {
		var col string
		if value != nil {
			jtv, ok := value.(string)
			if !ok {
				return fmt.Errorf("expected stringType to be of type string, got %T instead", value)
			}
			col = jtv
		}
		cv = append(cv, col)

	}
	*v = cv
	return nil
}

func awsAwsjson10_deserializeOpDocumentListExternalIdPConfigurationsForDirectoryOutput(v **ListExternalIdPConfigurationsForDirectoryOutput, value interface{}) error {
	if v == nil {
		return fmt.Errorf("unexpected nil of type %T", v)
	}
	if value == nil {
		return nil
	}

	shape, ok := value.(map[string]interface{})
	if !ok {
		return fmt.Errorf("unexpected JSON type %v", value)
	}

	var sv *ListExternalIdPConfigurationsForDirectoryOutput
	if *v == nil {
		sv = &ListExternalIdPConfigurationsForDirectoryOutput{}
	} else {
		sv = *v
	}

	for key, value := range shape {
		switch key {
		case "associations":
			if err := awsAwsjson10_deserializeDocumentIdpAssociations(&sv.Associations, value); err != nil {
				return err
			}

		default:
			_, _ = key, value

		}
	}
	*v = sv
	return nil
}

type protocolErrorInfo struct {
	Type    string `json:"__type"`
	Message string
	Code    any // nonstandard for awsjson but some services do present the type here
}

func getProtocolErrorInfo(decoder *json.Decoder) (protocolErrorInfo, error) {
	var errInfo protocolErrorInfo
	if err := decoder.Decode(&errInfo); err != nil {
		if err == io.EOF {
			return errInfo, nil
		}
		return errInfo, err
	}

	return errInfo, nil
}

func resolveProtocolErrorType(headerType string, bodyInfo protocolErrorInfo) (string, bool) {
	if len(headerType) != 0 {
		return headerType, true
	} else if len(bodyInfo.Type) != 0 {
		return bodyInfo.Type, true
	} else if code, ok := bodyInfo.Code.(string); ok && len(code) != 0 {
		return code, true
	}
	return "", false
}
